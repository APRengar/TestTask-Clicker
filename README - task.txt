Тестовое задание предназначено для того, чтобы оценить ваши навыки владения
технологиями UNITY, а также умение взаимодействовать в Backend игры – отправлять
запросы на сервер и получать ответы на них.
В рамках задания вам необходимо разработать несложную игру-кликер, а также
добавить в неё элементы взаимодействия с некоторыми публичными API.
Технологии, которые вы должны использовать
⦁ Zenject
⦁ Unirx + Unitask
⦁ Dotween
Не надо использовать:
⦁ ECS
Unity Version 2022.3 +
Требования к использованию паттернов:
MVC, MVP, Command, Zenject factory + pool
Все использовать не нужно, паттерны опциональны.


Суть задачи
Требуется разработать idle кликер, а также показать ваши умения работы с беком.
Приложение будет состоять из двух вкладок, которые можно переключить в нижней
навигационной панели. Первая вкладка кликер с погодой, вторая вкладка список
фактов. Вкладки должны переключатся через затемнение игровой части, сама панель
вкладок не должна затемняться.

Задание 1: Кликер
1. В середине экрана находится кнопка, при нажатии на которую начисляется 1
единица валюты.
2. Нужно сделать систему автосбора валюты – каждые 3 секунды кнопка нажимается
сама(со всеми fvx, п.4), даже если игрок ничего не делает, ему начисляется 1 единица
валюты.
3. Нужно сделать систему энергии, которая тратится на автосбор и на тапы по кнопке.
Энергия начисляется каждые 10 секунд по 10 единиц энергии. Максимальное
количество энергии - 1000. Изначально игроку дается максимальное значение энергии.
Каждый клик по кнопке стоит 1 единицу энергии. Каждое срабатывание системы
автосбора также стоит 1 единицу энергии.
4. VFX нажатия на кнопку из п.1
4.1 Партикл на разлет частиц.
4.2 Анимация полета единицы валюты наверх.
4.3 Визуальный отыгрыш самой кнопки.
4.4 Звуковое сопровождение.
Любые значения (стоимости, награды, балансы) должны быть настраиваемыми из
Scriptable Object.
UI
⦁ Окна должны быть адаптивными, и подстраиваться под разное разрешение
экрана.
⦁ Должен быть счетчик валюты
⦁ Должен быть счетчик энергии
Задание 2 Взаимодействие с сервером
Задание 2.1 Нужно написать систему взаимодействия с сервером, посредством
очереди исполняемых запросов. То есть все запросы к серверу должны выполняться
друг за другом, после завершения предыдущего запроса. В очередь должна быть
возможность добавлять запросы и получать результат выполненного запроса.


Задание 2.2 Прогноз погоды
API - https://api.weather.gov/gridpoints/TOP/32,81/forecast
Каждые 5 секунд в очередь встает запрос на получение погоды, при условии того, что
пользователь находится на экране с кликером. Если пользователь уйдет на другую
вкладку, если запрос был отправлен, то отменить его, если такой запрос есть в
очереди, то удалить его из очереди.
Когда запрос обработается необходимо вывести в правый верхний угол вкладки
кликера погоду в формате:
(иконка погоды) Сегодня - 61F
Задание 2.3 – Список фактов.
API - https://dogapi.dog/docs/api-v2
Когда мы переходим на вкладку факты, в очередь встает запрос на получение фактов.
Нужно показать загрузчик, пока выполняется запрос.
Нужно будет получить факты из запроса breeds, и вывести их в формате
1 - name
2 - name
и так далее
Факты кликабельны.
При нажатию по факту, в очередь встает запрос на получение данных факта по его
айдишнику.
Пока данные идут, нужно показать индикатор загрузки данных, например:
Загрузчик висит пока данные не придут.
Если пользователь нажмет на другой факт, запрос должен отмениться, загрузчик уйти,
и встать в очередь новый запрос.
Если пользователь захочет вернуться на вкладку с кликером запрос должен
отмениться, загрузчик уйти, и встать в очередь новый запрос на получение погоды.
Как придут данные, нужно вывести поп ап с названием факта и его описанием.
Нужно будет сделать один общий поп ап, с адаптивной высотой, в зависимости от
длины контента.
